version: 0.2
phases:
  install:
    runtime-versions:
      docker: 20    
    commands: 
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build: 
    commands: 
      - echo Logging in to Amazon ECR....
      - aws --version
      - $(aws ecr get-login --no-include-email --region ap-southeast-1)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - REPOSITORY_URI=$ECR_REPO_URL
      ########
      - export KUBECONFIG=$HOME/.kube/config
  build: 
    commands: 
      - echo Build started on `date`
      - echo Building the Docker image...
      # Build the Docker image with IMAGE_TAG
      - docker build -t $ECR_REPO_URL:$IMAGE_TAG .
      # Tag the image as 'latest' using the IMAGE_TAG
      - docker tag $ECR_REPO_URL:$IMAGE_TAG $ECR_REPO_URL:latest
  post_build: 
    commands: 
      - echo Build completed on `date`
      - echo Pushing to repository...
      # Push the image tagged with IMAGE_TAG to ECR
      - docker push $ECR_REPO_URL:$IMAGE_TAG
      # Push the image tagged as 'latest' to ECR
      - docker push $ECR_REPO_URL:latest
      # Updating kubectl with your EKS Cluster              
      - echo "Update Kube Config configuration"      
      - aws eks update-kubeconfig --name $EKS_CLUSTERNAME
      # Check if the namespace exists and create it if not
      # - echo "Checking if namespace $K8S_NAMESPACE exists..."
      # - |
      #   if ! kubectl get namespace $K8S_NAMESPACE; then
      #     echo "Namespace $K8S_NAMESPACE does not exist. Creating it..."
      #     kubectl create namespace $K8S_NAMESPACE
      #   else
      #     echo "Namespace $K8S_NAMESPACE already exists."
      #   fi
      # Apply the deployment manifest
      - echo "Applying deployment manifest"            
      - kubectl apply -f manifest/deployment.yaml -n $K8S_NAMESPACE
      # Apply the service manifest to expose the port
      - echo "Exposing service with service.yaml"            
      - kubectl apply -f manifest/service.yaml -n $K8S_NAMESPACE
      - echo "All done!!!! Kubernetes changes applied"   
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $ECR_REPO_URL:$IMAGE_TAG > imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - manifest/*